// Code generated by MockGen. DO NOT EDIT.
// Source: gocoin.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mautrix "maunium.net/go/mautrix"
	id "maunium.net/go/mautrix/id"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// SendText mocks base method.
func (m *MockSender) SendText(arg0 id.RoomID, arg1 string) (*mautrix.RespSendEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendText", arg0, arg1)
	ret0, _ := ret[0].(*mautrix.RespSendEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendText indicates an expected call of SendText.
func (mr *MockSenderMockRecorder) SendText(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendText", reflect.TypeOf((*MockSender)(nil).SendText), arg0, arg1)
}
